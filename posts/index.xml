<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on a-simple-bolg</title>
    <link>https://edte.github.io/posts/</link>
    <description>Recent content in Posts on a-simple-bolg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://edte.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>编写 go 语言时需要注意的那些规范</title>
      <link>https://edte.github.io/2020/2020-07-12-%E7%BC%96%E5%86%99-go-%E8%AF%AD%E8%A8%80%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%82%A3%E4%BA%9B%E8%A7%84%E8%8C%83/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-07-12-%E7%BC%96%E5%86%99-go-%E8%AF%AD%E8%A8%80%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%82%A3%E4%BA%9B%E8%A7%84%E8%8C%83/</guid>
      <description>前言 这篇文章将总结在编写 go 代码中常遇到的一些代码规范问题，本文只设计那些众多语言都会遇到的规范，不深入 go 语言的具体编写规范，如 go 的错误处理，</description>
    </item>
    
    <item>
      <title>为什么你的程序总是 stack overflow?</title>
      <link>https://edte.github.io/2020/2020-07-10-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%80%BB%E6%98%AF-stack-overflow/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-07-10-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%80%BB%E6%98%AF-stack-overflow/</guid>
      <description>前言 在刷 leetcode 时，遇到了 stack-buffer-overflow, 这个问题比较常见，干脆总结一下原因。本文是在 linux 下操作的，需要使用一些相关的命令。 stack 是什么 一般 stack 这个词有两个意思，即 stack 这</description>
    </item>
    
    <item>
      <title>图解队列</title>
      <link>https://edte.github.io/2020/2020-07-08-%E5%9B%BE%E8%A7%A3%E9%98%9F%E5%88%97/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-07-08-%E5%9B%BE%E8%A7%A3%E9%98%9F%E5%88%97/</guid>
      <description>引言 这篇文章是根据我学习 queue 的学习笔记总结而成的。 定义 queue 是线性表(linear list)中的一种，元素间遵循一对一的原则。 除此外，queue 遵</description>
    </item>
    
    <item>
      <title>i3 用户指南（翻译）</title>
      <link>https://edte.github.io/2020/2020-06-21-i3-%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-06-21-i3-%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</guid>
      <description>前言 这篇文章是 i3 User’s Guide 的中文翻译，主要是因为国内 i3 比较小众，相关的配置博客都只是讲了他做了些什么，而没有讲为什么要这么做，以及其他 i3</description>
    </item>
    
    <item>
      <title>图解链表</title>
      <link>https://edte.github.io/2020/2020-06-19-%E5%9B%BE%E8%A7%A3%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-06-19-%E5%9B%BE%E8%A7%A3%E9%93%BE%E8%A1%A8/</guid>
      <description>前言 这篇文章是我学习链表的笔记总结，没有主要参考的书籍，尝试过阅读《大话数据结构》，但是这本书读着不太舒服，主要参考各种博客，以及刷了一些 leetcode</description>
    </item>
    
    <item>
      <title>markdown 学习笔记</title>
      <link>https://edte.github.io/2020/2020-06-12-markdown-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-06-12-markdown-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>引言 Markdown 是一种轻量级标记语言，创始人为约翰・格鲁伯（英语： John Gruber）。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHT</description>
    </item>
    
    <item>
      <title>浅谈数据结构与算法</title>
      <link>https://edte.github.io/2020/2020-06-11-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-06-11-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</guid>
      <description>引言 这篇文章是我阅读《大话数据结构》前两章，和阅读相关一些博客的学习笔记总结，主要介绍一下数据结构和算法是什么，有什么用。 前言 在介绍数据结构</description>
    </item>
    
    <item>
      <title>go builtin 包讲解</title>
      <link>https://edte.github.io/2020/2020-06-09-go-builtin-%E5%8C%85%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-06-09-go-builtin-%E5%8C%85%E8%AE%B2%E8%A7%A3/</guid>
      <description>引言 这篇博客记录一下我学习 builtin 包的一些历程 介绍 我们知道，一门语言中的函数有两种类型，即内置函数和标准库函数，内置函数在直接内置在编译器中，而标</description>
    </item>
    
    <item>
      <title>go errors 包讲解</title>
      <link>https://edte.github.io/2020/2020-06-02-go-errors-%E5%8C%85%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-06-02-go-errors-%E5%8C%85%E8%AE%B2%E8%A7%A3/</guid>
      <description>引言 go 包实现了处理 error 的一些功能。 这是源码注释 // Package errors implements functions to manipulate errors. errors 包的源码放在 $GOROOT/src/errors 中 查看安装目录 go env GOROOT 为了方便阅读源码和调试，建议将源码复制后作为</description>
    </item>
    
    <item>
      <title>go 标识符命名指南</title>
      <link>https://edte.github.io/2020/2020-06-01-go-%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-06-01-go-%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E6%8C%87%E5%8D%97/</guid>
      <description>引言 对标识符的命名向来是程序员们苦恼的事，这篇文章将参考标准库和一些流行轮子的命名规范来总结一下标识符的命名。 基本准则 标识符命名由 Unicode 字母或下</description>
    </item>
    
    <item>
      <title>go 注释讲解</title>
      <link>https://edte.github.io/2020/2020-06-01-go-%E6%B3%A8%E9%87%8A%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-06-01-go-%E6%B3%A8%E9%87%8A%E8%AE%B2%E8%A7%A3/</guid>
      <description>引言 注释的重要性不言而寓，而怎么编写注释也是需要我们学习的，最好的学习教程就是源码，这篇文章将大量参考 go 库文件源码。 分类 go 的注释有行注释 // 和</description>
    </item>
    
    <item>
      <title>充电宝选购指南</title>
      <link>https://edte.github.io/2020/2020-06-01-%E5%85%85%E7%94%B5%E5%AE%9D%E9%80%89%E8%B4%AD%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-06-01-%E5%85%85%E7%94%B5%E5%AE%9D%E9%80%89%E8%B4%AD%E6%8C%87%E5%8D%97/</guid>
      <description>介绍 移动电源(power bank) 是一种随身携带，能为电子产品充电的便携式充电器。 一般我们所说的充电宝就是功率比较小的移动电源，只能给小型电子设备充</description>
    </item>
    
    <item>
      <title>go 常用命令介绍</title>
      <link>https://edte.github.io/2020/2020-05-09-go-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-09-go-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/</guid>
      <description>命令介绍 go 语言自带了一些命令行命令，熟悉这些命令对开发有一定的好处。 可以使用 go 或 go help 查看 往下看，有 故我们可以使用 go help cmd_name 命令查看具体的命令，如</description>
    </item>
    
    <item>
      <title>go 中的标识符和关键字</title>
      <link>https://edte.github.io/2020/2020-05-31-go-%E4%B8%AD%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-31-go-%E4%B8%AD%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>关键字 关键字 (keyword) 也叫 保留字 (reserved word), 是编程语言中预先被定义，有特定意义的词。 目前 go 中一共有 25 个关键字。 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import</description>
    </item>
    
    <item>
      <title>沟通的重要性</title>
      <link>https://edte.github.io/2020/2020-05-26-%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-26-%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</guid>
      <description>沟通的重要性 世界上大多数暴力都是因为沟通不到位造成的 无论是技术人员，还是服务人员，每天总要花大量时间在与人沟通上。哪怕是再孤僻的人，他也无法</description>
    </item>
    
    <item>
      <title>pixel 2 搞机备份</title>
      <link>https://edte.github.io/2020/2020-05-14-pixel-2-%E6%90%9E%E6%9C%BA%E5%A4%87%E4%BB%BD/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-14-pixel-2-%E6%90%9E%E6%9C%BA%E5%A4%87%E4%BB%BD/</guid>
      <description>刷机一时爽，忘记备份火葬厂 今天手痒，一番瞎折腾，忘记备份了，结果无限卡 fastboot, 然后我一年多的数据就凉了，这是泪的教训。。。（哭 设备 系统: Arch Linux 设备:</description>
    </item>
    
    <item>
      <title>刷机那些事</title>
      <link>https://edte.github.io/2020/2020-05-14-%E6%90%9E%E6%9C%BA%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-14-%E6%90%9E%E6%9C%BA%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Arch 挂载安卓手机</title>
      <link>https://edte.github.io/2020/2020-05-10-arch-%E6%8C%82%E8%BD%BD%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-10-arch-%E6%8C%82%E8%BD%BD%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA/</guid>
      <description>让 Arch 支持 MTP MTP 即 Media Transfer Protocol，该协议允许使用者在移动设备上线性存取媒体文件。 也就是说让 Arch 支持和安卓设备进行文件传输的协议。需要下载这几</description>
    </item>
    
    <item>
      <title>浅谈 go 中常见数据类型间的转换</title>
      <link>https://edte.github.io/2020/2020-05-10-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-10-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
      <description>要理解类型转换（type conversion），那么首先要知道有哪些类型，请先阅读这篇文章 [go 数据系统]()。 知道了 go 中数据类型有哪些，我们来</description>
    </item>
    
    <item>
      <title>浅谈 go 的类型系统</title>
      <link>https://edte.github.io/2020/2020-05-10-%E6%B5%85%E8%B0%88-go-%E7%9A%84%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-10-%E6%B5%85%E8%B0%88-go-%E7%9A%84%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</guid>
      <description>既然要讲类型转换，那么我们就要先了解有哪些类型。也就是要先大概了解一下 go 的类型系统（Type system） 首先我们要先知道 go 自带的有哪些类型</description>
    </item>
    
    <item>
      <title>浅谈 go 中断言的应用</title>
      <link>https://edte.github.io/2020/2020-05-11-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E6%96%AD%E8%A8%80%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-11-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E6%96%AD%E8%A8%80%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>类型断言 语法 varOfTypeA,ok = varOfInterfaceB.(TypeA) 即把 varOfInterfaceB 转换为 TypeA varOfTypeA: 断言成功则是得到的新类型变量，如果断言则是 nil，且会报 panic ok : 一个 bool， 用于判断断言是否成功，可以不存</description>
    </item>
    
    <item>
      <title>浅谈 new 和 make 的区别</title>
      <link>https://edte.github.io/2020/2020-05-09-%E6%B5%85%E8%B0%88-new-%E5%92%8C-make-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-09-%E6%B5%85%E8%B0%88-new-%E5%92%8C-make-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>func new(Type) *Type func make(t Type, size ...IntegerType) Type</description>
    </item>
    
    <item>
      <title>浅谈 go 中的 ok 断言的使用</title>
      <link>https://edte.github.io/2020/2020-05-08-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E7%9A%84-ok-%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-08-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E7%9A%84-ok-%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>断言(assertion) wiki是这么说的 在程式设计中，断言（ assertion ）是一种放在程式中的一阶逻辑（如一个结果为真或是假的逻辑判断式） 换言之，断</description>
    </item>
    
    <item>
      <title>Arch 使用 USB 共享网络上网</title>
      <link>https://edte.github.io/2020/2020-05-06-arch-%E4%BD%BF%E7%94%A8-usb-%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C%E4%B8%8A%E7%BD%91/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-06-arch-%E4%BD%BF%E7%94%A8-usb-%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C%E4%B8%8A%E7%BD%91/</guid>
      <description>手机设置 根据具体手机，我这里是 pixel2 ，打开 设置 -&amp;gt; 网络与互联网 -&amp;gt; 热点与网络共享 -&amp;gt; USB共享网络设置 模块设置 要使用 USB 共享网络，必要模块如下， rndis_host cdc_ether usbnet 使</description>
    </item>
    
    <item>
      <title>谈谈 Golang 中接口 interface 的应用</title>
      <link>https://edte.github.io/2020/2020-05-03-%E8%B0%88%E8%B0%88-golang-%E4%B8%AD%E6%8E%A5%E5%8F%A3-interface-%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-03-%E8%B0%88%E8%B0%88-golang-%E4%B8%AD%E6%8E%A5%E5%8F%A3-interface-%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>interface 是什么 在讲解 interface 是什么之前，先让我们了解这个名词： duck typing，翻译成中文就是 鸭子类型。我们来看 wiki 是怎样说明的： 鸭子类型（英语： duck typing ）在程</description>
    </item>
    
    <item>
      <title>Goland 快捷键讲解</title>
      <link>https://edte.github.io/2020/2020-05-02-goland-%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-02-goland-%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B2%E8%A7%A3/</guid>
      <description>原则 快捷键不能过多 快捷键不能过多，一个 ide 就有许多快捷键，再加上浏览器，终端等等，快捷键如此之多，而且快捷键与功能之间并没有关系，也就是说，你</description>
    </item>
    
    <item>
      <title>浅谈 go 中的 package 和 directory</title>
      <link>https://edte.github.io/2020/2020-05-01-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E7%9A%84-package-%E5%92%8C-directory/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-01-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E7%9A%84-package-%E5%92%8C-directory/</guid>
      <description>几个 概念 project: project 即项目，这是最大的单位 package: package 即包，包是程序的概念，程序又不同的包组成 directory: directory 即文件夹，里面可以放文件 file file: file 即文件，一般加后缀的那个就是</description>
    </item>
    
    <item>
      <title>每天一个-Linux-命令(2)find</title>
      <link>https://edte.github.io/2020/2020-04-26-%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA-linux-%E5%91%BD%E4%BB%A42find/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-04-26-%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA-linux-%E5%91%BD%E4%BB%A42find/</guid>
      <description>语法 find path test action 说明 path 表示 find 的目标路径，可以用空格隔开多个路径 如 find ./ ../ -name &amp;quot;*.jpg&amp;quot; # 此表示在本目录和上一级目录中查找所有 jpg 文件 test 表示目标需要符合的条件，</description>
    </item>
    
    <item>
      <title>arch安装配置</title>
      <link>https://edte.github.io/2020/2020-04-21-arch-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-04-21-arch-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
      <description>u 盘准备 从 下载页面 选择下好 iso 文件, 插入 u 盘 使用 dd 命令刻录 dd if=boot.img of=/dev/sdx bs=4M 进入 live 环境 联网 dhcpcd 判断网络连接是否正常： ping www.baidu.com 分区 建两个分区, 一个 300 M 大小的 EFI 分</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://edte.github.io/2020/2020-04-22-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-04-22-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>定义 以下引用 wiki： 正则表达式（英语： Regular Expression，常简写为 regex、regexp 或 RE），又称 正则表示式、正则表示法、规则表</description>
    </item>
    
    <item>
      <title>技术名词相关</title>
      <link>https://edte.github.io/2020/2020-04-15-%E6%8A%80%E6%9C%AF%E5%90%8D%E8%AF%8D%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-04-15-%E6%8A%80%E6%9C%AF%E5%90%8D%E8%AF%8D%E7%9B%B8%E5%85%B3/</guid>
      <description>认识常见缩写(看见缩写知道原本单词和意思, 看见名词知道其缩写) 认识常见技术名词(看见就知其意/读技术文档) 常见名词能正确发音 克服抵触心理 搜集</description>
    </item>
    
    <item>
      <title>安卓与 Linux 互传文件的几种方法</title>
      <link>https://edte.github.io/2020/2020-04-14-%E5%AE%89%E5%8D%93%E4%B8%8E-linux-%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-04-14-%E5%AE%89%E5%8D%93%E4%B8%8E-linux-%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>电脑传简短的文件或链接至手机 有时候我们需要把电脑上一些文字传到手机上，可以使用 Chrome 扩展 二维码生成器 ，把文字转为二维码，然后手机扫描后可获取，如</description>
    </item>
    
    <item>
      <title>每天一个 Linux 命令(1):ls</title>
      <link>https://edte.github.io/2020/2020-04-06-%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA-linux-%E5%91%BD%E4%BB%A41ls/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-04-06-%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA-linux-%E5%91%BD%E4%BB%A41ls/</guid>
      <description>说明 ls 是 list 的缩写。ls 用于列出目录下的文件和子目录。 语法 ls [参数] [目录名] 参数 -a 列出所有目录，包括隐藏目录。 -l 列出文件详情，包括权限，拥有</description>
    </item>
    
    <item>
      <title>zsh 配置</title>
      <link>https://edte.github.io/2020/2020-03-24-zsh-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-03-24-zsh-%E9%85%8D%E7%BD%AE/</guid>
      <description>[toc] shell 准备 查看系统已有的 shell cat /etc/shells 安装 zsh manjaro 内置已经支持 zsh centos yum install zsh 安装 oh my zsh sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot; or sh -c &amp;quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&amp;quot; 切换系统 shell chsh -s /bin/zsh oh-my-zsh 配置 配置文件 配置文件是 ~/.zshrc 修改配</description>
    </item>
    
    <item>
      <title>代码命名那些事</title>
      <link>https://edte.github.io/2020/2020-03-08-%E4%BB%A3%E7%A0%81%E5%91%BD%E5%90%8D%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-03-08-%E4%BB%A3%E7%A0%81%E5%91%BD%E5%90%8D%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>[toc] 原则 选择描述性的词语，名称要能够描述它所代表的意思，要尽可能的存更多的意思。 检测 将名字告诉别人，如果别人的想到的和你考虑到的一样，那么代码</description>
    </item>
    
    <item>
      <title>经验</title>
      <link>https://edte.github.io/2020/2020-03-07-%E7%BB%8F%E9%AA%8C/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-03-07-%E7%BB%8F%E9%AA%8C/</guid>
      <description>加入一个社区 github Stack Overflow 拥有一位导师 读源码 读博客，学习别人怎么排版的 写博客，记笔记 东拼西几十篇垃圾博客还没有书详细 买实体书前先找电子版 强迫自己不用</description>
    </item>
    
    <item>
      <title>github 进阶</title>
      <link>https://edte.github.io/2020/2020-03-06-github-%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-03-06-github-%E8%BF%9B%E9%98%B6/</guid>
      <description>原则：存在什么功能, 就有其规范。存在规范, 就能从别人那里学习。 README dictionary commit messge doc code test ci/cd pull GitHub 漫游指南 github-cheat-sheet 在校生如何在开源社区中成长？ 跳出弱鸡循环2</description>
    </item>
    
    <item>
      <title>使用 Travis CI 自动部署 Hugo 博客至 github pages</title>
      <link>https://edte.github.io/2020/2020-03-05-%E4%BD%BF%E7%94%A8-travis-ci-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-hugo-%E5%8D%9A%E5%AE%A2%E8%87%B3-github-pages/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-03-05-%E4%BD%BF%E7%94%A8-travis-ci-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-hugo-%E5%8D%9A%E5%AE%A2%E8%87%B3-github-pages/</guid>
      <description>[toc] 原理 在 github 上建立两个 repo, 一个用于放博客源码，假如名字是blog, 另一个用于部署博客, 名字符合 username.github.io 格式，username 是你的 github 名。用户只需将 blog clone</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://edte.github.io/2020/2020-03-04-helloworld/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-03-04-helloworld/</guid>
      <description> Hello World! </description>
    </item>
    
    <item>
      <title>Linux 同时上内外网</title>
      <link>https://edte.github.io/2020/2020-03-04-linux-%E5%90%8C%E6%97%B6%E4%B8%8A%E5%86%85%E5%A4%96%E7%BD%91/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-03-04-linux-%E5%90%8C%E6%97%B6%E4%B8%8A%E5%86%85%E5%A4%96%E7%BD%91/</guid>
      <description>首先把网卡名字修改回eth0等默认的，没有则无需修改 参照 输入su进入root用户 输入route查看默认路由,如果提示不存在，先安装net-t</description>
    </item>
    
    <item>
      <title>Manjaro 基本配置</title>
      <link>https://edte.github.io/2020/2020-03-04-manjaro-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-03-04-manjaro-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>换源 更换pacman的源,会自动弹出源，选择延迟低的，如中科大，或者清华的。 sudo pacman-mirrors -i -c China -m rank 更换 ArchLinuxCN 的软件源，选一个即可，无需与pacman的源</description>
    </item>
    
    <item>
      <title>文案排版</title>
      <link>https://edte.github.io/2020/2020-03-04-%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-03-04-%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88/</guid>
      <description>中文和英文间加空格 错误: 打开windows程序 正确: 打开 windows 程序 文字和数字间加空格 错误: 共1024元 正确: 共 1024 元 数字使用半角 错误: １０００ 正确</description>
    </item>
    
    <item>
      <title></title>
      <link>https://edte.github.io/1/%E5%89%8D%E8%A8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/1/%E5%89%8D%E8%A8%80/</guid>
      <description>前言 这篇文章总结了我学习字符编码的学习笔记。
引言 无论你是搞前端，后端，还是移动，ios，只要在开发，或者说，只要你在使用计算机，那么就不可能避开字符编码的问题。
比如经典的烫烫烫烫这个梗，就是访问数组越界了，在 c 里的话，会给一个脏值，即值不确定的数。而在 Visual Studio 中，如果程序是 GB 系列的编码，debug 模式下会给未初始化的栈空间用 0xCC 填充，就是 ‘烫’ 字，而未初始化的堆空间则会用 0xCD 填充，这就是 ‘屯’ 字。如果输出的时候没有 &#39;\0&#39; 的话，就是一直打印，所以这就是这个著名的 烫烫烫烫烫烫 梗的来源了。如果你更改编码，换成台湾（BIG-5）的编码，则会变成，“昍昍昍”，如果是日本（Shift-JIS）应该会显示 “ﾌﾌﾌﾌﾌﾌ”。当然这也是多种巧合重合才出现了这种结果，如果你换一个 ide，或者在 Linux 下编译的话，则会报段错误，原因是 Linux 不支持访问越界的内存。
数据类型的由来 计算机都是 0,1 组成的，这是由硬件结构所决定的，这是我们都知道的。那么我们为什么要封装 data type 这个概念呢？当我们在说可执行文件，文本文件，int，character 的时候，我们究竟在说些什么？它们不都是 0 和 1 吗，它们有什么区别？
在任何一个高级语言中，你总能发现它们拥有一些相同的数据类型。number, character，bool，point, null 等。而又有其他基于此的类型，如 map，string，array 等等。
问题来了，为什么我们要这么做？
在 sicp 这本书中，它一直在强调一点，那就是抽象的重要性。而这里，其实也是抽象后，封装的一种思想。
 a type is a combination of data, and the operations you can perform on the data.</description>
    </item>
    
  </channel>
</rss>