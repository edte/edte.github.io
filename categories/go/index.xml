<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on a-simple-bolg</title>
    <link>https://edte.github.io/categories/go/</link>
    <description>Recent content in go on a-simple-bolg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://edte.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>编写 go 语言时需要注意的那些规范</title>
      <link>https://edte.github.io/2020/2020-07-12-%E7%BC%96%E5%86%99-go-%E8%AF%AD%E8%A8%80%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%82%A3%E4%BA%9B%E8%A7%84%E8%8C%83/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-07-12-%E7%BC%96%E5%86%99-go-%E8%AF%AD%E8%A8%80%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%82%A3%E4%BA%9B%E8%A7%84%E8%8C%83/</guid>
      <description>前言 这篇文章将总结在编写 go 代码中常遇到的一些代码规范问题，本文只设计那些众多语言都会遇到的规范，不深入 go 语言的具体编写规范，如 go 的错误处理，</description>
    </item>
    
    <item>
      <title>go 常用命令介绍</title>
      <link>https://edte.github.io/2020/2020-05-09-go-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-09-go-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/</guid>
      <description>命令介绍 go 语言自带了一些命令行命令，熟悉这些命令对开发有一定的好处。 可以使用 go 或 go help 查看 往下看，有 故我们可以使用 go help cmd_name 命令查看具体的命令，如</description>
    </item>
    
    <item>
      <title>go 中的标识符和关键字</title>
      <link>https://edte.github.io/2020/2020-05-31-go-%E4%B8%AD%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-31-go-%E4%B8%AD%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>关键字 关键字 (keyword) 也叫 保留字 (reserved word), 是编程语言中预先被定义，有特定意义的词。 目前 go 中一共有 25 个关键字。 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import</description>
    </item>
    
    <item>
      <title>浅谈 go 中常见数据类型间的转换</title>
      <link>https://edte.github.io/2020/2020-05-10-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-10-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
      <description>要理解类型转换（type conversion），那么首先要知道有哪些类型，请先阅读这篇文章 [go 数据系统]()。 知道了 go 中数据类型有哪些，我们来</description>
    </item>
    
    <item>
      <title>浅谈 go 的类型系统</title>
      <link>https://edte.github.io/2020/2020-05-10-%E6%B5%85%E8%B0%88-go-%E7%9A%84%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-10-%E6%B5%85%E8%B0%88-go-%E7%9A%84%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</guid>
      <description>既然要讲类型转换，那么我们就要先了解有哪些类型。也就是要先大概了解一下 go 的类型系统（Type system） 首先我们要先知道 go 自带的有哪些类型</description>
    </item>
    
    <item>
      <title>浅谈 go 中断言的应用</title>
      <link>https://edte.github.io/2020/2020-05-11-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E6%96%AD%E8%A8%80%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-11-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E6%96%AD%E8%A8%80%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>类型断言 语法 varOfTypeA,ok = varOfInterfaceB.(TypeA) 即把 varOfInterfaceB 转换为 TypeA varOfTypeA: 断言成功则是得到的新类型变量，如果断言则是 nil，且会报 panic ok : 一个 bool， 用于判断断言是否成功，可以不存</description>
    </item>
    
    <item>
      <title>浅谈 new 和 make 的区别</title>
      <link>https://edte.github.io/2020/2020-05-09-%E6%B5%85%E8%B0%88-new-%E5%92%8C-make-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-09-%E6%B5%85%E8%B0%88-new-%E5%92%8C-make-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>func new(Type) *Type func make(t Type, size ...IntegerType) Type</description>
    </item>
    
    <item>
      <title>浅谈 go 中的 ok 断言的使用</title>
      <link>https://edte.github.io/2020/2020-05-08-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E7%9A%84-ok-%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-08-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E7%9A%84-ok-%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>断言(assertion) wiki是这么说的 在程式设计中，断言（ assertion ）是一种放在程式中的一阶逻辑（如一个结果为真或是假的逻辑判断式） 换言之，断</description>
    </item>
    
    <item>
      <title>谈谈 Golang 中接口 interface 的应用</title>
      <link>https://edte.github.io/2020/2020-05-03-%E8%B0%88%E8%B0%88-golang-%E4%B8%AD%E6%8E%A5%E5%8F%A3-interface-%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-03-%E8%B0%88%E8%B0%88-golang-%E4%B8%AD%E6%8E%A5%E5%8F%A3-interface-%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>interface 是什么 在讲解 interface 是什么之前，先让我们了解这个名词： duck typing，翻译成中文就是 鸭子类型。我们来看 wiki 是怎样说明的： 鸭子类型（英语： duck typing ）在程</description>
    </item>
    
    <item>
      <title>浅谈 go 中的 package 和 directory</title>
      <link>https://edte.github.io/2020/2020-05-01-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E7%9A%84-package-%E5%92%8C-directory/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://edte.github.io/2020/2020-05-01-%E6%B5%85%E8%B0%88-go-%E4%B8%AD%E7%9A%84-package-%E5%92%8C-directory/</guid>
      <description>几个 概念 project: project 即项目，这是最大的单位 package: package 即包，包是程序的概念，程序又不同的包组成 directory: directory 即文件夹，里面可以放文件 file file: file 即文件，一般加后缀的那个就是</description>
    </item>
    
  </channel>
</rss>